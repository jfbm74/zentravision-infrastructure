---
# ============================================================================
# ARCHIVO CORREGIDO: ansible/roles/monitoring/tasks/grafana_agent.yml
# Versi√≥n que evita campos duplicados en la configuraci√≥n YAML
# ============================================================================

- name: Display Grafana Agent setup information
  debug:
    msg: |
      üöÄ Configurando Grafana Agent para {{ app_environment | default(environment) }}
      ================================================================
      
      üìä Configuraci√≥n:
      - Proyecto: {{ gcp_project_id }}
      - Ambiente: {{ app_environment | default(environment) }}
      - Secret esperado: {{ gcp_project_id }}-{{ app_environment | default(environment) }}-grafana-token

# ============================================================================
# VALIDACIONES PREVIAS
# ============================================================================

- name: Check if Grafana API Token secret exists and is accessible
  command: >
    gcloud secrets versions access latest 
    --secret="{{ gcp_project_id }}-{{ app_environment | default(environment) }}-grafana-token"
  register: grafana_secret_check
  failed_when: false
  changed_when: false
  no_log: true

- name: Fail if Grafana API Token secret doesn't exist or is not accessible
  fail:
    msg: |
      ‚ùå Grafana API Token secret no encontrado o no accesible: {{ gcp_project_id }}-{{ app_environment | default(environment) }}-grafana-token
      
      üìù Para crear el secret, ejecuta:
      ./scripts/configure-grafana-token.sh {{ gcp_project_id }} {{ app_environment | default(environment) }}
      
      O manualmente:
      echo -n "tu-grafana-token" | gcloud secrets create {{ gcp_project_id }}-{{ app_environment | default(environment) }}-grafana-token --data-file=-
      
      üîê Verifica que el Service Account tenga permisos:
      gcloud projects add-iam-policy-binding {{ gcp_project_id }} \
        --member="serviceAccount:{{ gcp_project_id }}-{{ app_environment | default(environment) }}@{{ gcp_project_id }}.iam.gserviceaccount.com" \
        --role="roles/secretmanager.secretAccessor"
  when: grafana_secret_check.rc != 0

- name: Set Grafana API Token variable
  set_fact:
    grafana_api_token_value: "{{ grafana_secret_check.stdout }}"
  no_log: true

- name: Verify Grafana API Token format
  fail:
    msg: "‚ùå Error: Grafana API Token no tiene el formato esperado (debe empezar con 'glc_')"
  when: not grafana_api_token_value.startswith('glc_')

- name: Display Grafana Cloud configuration (without token)
  debug:
    msg: |
      üìä Configuraci√≥n Grafana Cloud
      =============================
      URL: {{ vault_grafana_prometheus_url }}
      Usuario: {{ vault_grafana_username }}
      Token: {{ grafana_api_token_value[:10] }}*** (obtenido de Secret Manager)
      Secret: {{ gcp_project_id }}-{{ app_environment | default(environment) }}-grafana-token

# ============================================================================
# INSTALACI√ìN DE GRAFANA AGENT
# ============================================================================

- name: Stop existing Grafana Agent service if exists
  systemd:
    name: grafana-agent
    state: stopped
  ignore_errors: yes

- name: Remove existing Grafana Agent configuration (cleanup)
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/grafana-agent.zip
    - /tmp/grafana-agent-linux-amd64
  ignore_errors: yes

- name: Download Grafana Agent v0.38.1
  get_url:
    url: "https://github.com/grafana/agent/releases/download/{{ grafana_agent_version | default('v0.38.1') }}/grafana-agent-linux-amd64.zip"
    dest: "/tmp/grafana-agent.zip"
    timeout: 60
    mode: '0644'
  retries: 3
  delay: 10

- name: Extract Grafana Agent
  unarchive:
    src: "/tmp/grafana-agent.zip"
    dest: "/tmp"
    remote_src: yes
    creates: "/tmp/grafana-agent-linux-amd64"

- name: Install Grafana Agent binary
  copy:
    src: "/tmp/grafana-agent-linux-amd64"
    dest: "/usr/local/bin/grafana-agent"
    mode: '0755'
    owner: root
    group: root
    remote_src: yes
  notify: restart grafana-agent

- name: Verify Grafana Agent binary installation
  command: /usr/local/bin/grafana-agent --version
  register: grafana_agent_version_check
  changed_when: false
  failed_when: grafana_agent_version_check.rc != 0

- name: Display Grafana Agent version
  debug:
    msg: "‚úÖ Grafana Agent installed: {{ grafana_agent_version_check.stdout_lines[0] }}"

# ============================================================================
# VARIABLES CONSOLIDADAS PARA EVITAR DUPLICADOS
# ============================================================================

- name: Consolidate all variables for template generation (ANTI-DUPLICADO)
  set_fact:
    # Variables principales verificadas
    consolidated_vars:
      # Autenticaci√≥n Grafana Cloud
      vault_grafana_prometheus_url: "{{ vault_grafana_prometheus_url }}"
      vault_grafana_username: "{{ vault_grafana_username }}"
      vault_grafana_password: "{{ grafana_api_token_value }}"
      
      # Configuraci√≥n de ambiente
      app_environment: "{{ app_environment | default(environment) }}"
      gcp_project_id: "{{ gcp_project_id }}"
      inventory_hostname: "{{ inventory_hostname }}"
      
      # Puertos de exporters (con defaults seguros)
      grafana_agent_port: "{{ grafana_agent_port | default(12345) }}"
      node_exporter_port: "{{ node_exporter_port | default(9100) }}"
      redis_exporter_port: "{{ redis_exporter_port | default(9121) }}"
      nginx_exporter_port: "{{ nginx_exporter_port | default(9113) }}"
      postgres_exporter_port: "{{ postgres_exporter_port | default(9187) }}"
      
      # Configuraci√≥n de scraping
      scrape_interval: "{{ scrape_interval | default('15s') }}"
      evaluation_interval: "{{ evaluation_interval | default('15s') }}"
      
      # Performance tuning
      max_samples_per_send: "{{ max_samples_per_send | default(1000) }}"
      batch_send_deadline: "{{ batch_send_deadline | default('5s') }}"
      max_shards: "{{ max_shards | default(10) }}"
      min_shards: "{{ min_shards | default(1) }}"
      capacity: "{{ capacity | default(10000) }}"
      
      # Flags de habilitaci√≥n
      enable_node_exporter: "{{ enable_node_exporter | default(true) }}"
      enable_postgres_exporter: "{{ enable_postgres_exporter | default(true) }}"
      enable_redis_exporter: "{{ enable_redis_exporter | default(true) }}"
      enable_nginx_exporter: "{{ enable_nginx_exporter | default(true) }}"
      django_metrics_enabled: "{{ django_metrics_enabled | default(false) }}"

- name: Display consolidated variables for debugging
  debug:
    msg: |
      üîß Variables Consolidadas para Template
      =====================================
      Grafana URL: {{ consolidated_vars.vault_grafana_prometheus_url }}
      Usuario: {{ consolidated_vars.vault_grafana_username }}
      Token: {{ consolidated_vars.vault_grafana_password[:10] }}***
      Ambiente: {{ consolidated_vars.app_environment }}
      Proyecto: {{ consolidated_vars.gcp_project_id }}
      
      üéØ Puertos de Exporters:
      - Grafana Agent: {{ consolidated_vars.grafana_agent_port }}
      - Node Exporter: {{ consolidated_vars.node_exporter_port }}
      - Redis Exporter: {{ consolidated_vars.redis_exporter_port }}
      - Nginx Exporter: {{ consolidated_vars.nginx_exporter_port }}
      - Postgres Exporter: {{ consolidated_vars.postgres_exporter_port }}

# ============================================================================
# GENERACI√ìN DE CONFIGURACI√ìN (USANDO VARIABLES CONSOLIDADAS)
# ============================================================================

- name: Backup existing configuration if it exists
  copy:
    src: /etc/grafana-agent/grafana-agent.yml
    dest: "/etc/grafana-agent/grafana-agent.yml.backup-{{ ansible_date_time.epoch }}"
    remote_src: yes
  ignore_errors: yes

- name: Generate Grafana Agent configuration with consolidated variables
  template:
    src: grafana-agent.yml.j2
    dest: /etc/grafana-agent/grafana-agent.yml
    owner: monitoring
    group: monitoring
    mode: '0600'
    backup: yes
  vars:
    # Pasar variables consolidadas al template
    vault_grafana_prometheus_url: "{{ consolidated_vars.vault_grafana_prometheus_url }}"
    vault_grafana_username: "{{ consolidated_vars.vault_grafana_username }}"
    vault_grafana_password: "{{ consolidated_vars.vault_grafana_password }}"
    
    app_environment: "{{ consolidated_vars.app_environment }}"
    gcp_project_id: "{{ consolidated_vars.gcp_project_id }}"
    inventory_hostname: "{{ consolidated_vars.inventory_hostname }}"
    
    grafana_agent_port: "{{ consolidated_vars.grafana_agent_port }}"
    node_exporter_port: "{{ consolidated_vars.node_exporter_port }}"
    redis_exporter_port: "{{ consolidated_vars.redis_exporter_port }}"
    nginx_exporter_port: "{{ consolidated_vars.nginx_exporter_port }}"
    postgres_exporter_port: "{{ consolidated_vars.postgres_exporter_port }}"
    
    scrape_interval: "{{ consolidated_vars.scrape_interval }}"
    evaluation_interval: "{{ consolidated_vars.evaluation_interval }}"
    
    max_samples_per_send: "{{ consolidated_vars.max_samples_per_send }}"
    batch_send_deadline: "{{ consolidated_vars.batch_send_deadline }}"
    max_shards: "{{ consolidated_vars.max_shards }}"
    min_shards: "{{ consolidated_vars.min_shards }}"
    capacity: "{{ consolidated_vars.capacity }}"
    
    enable_node_exporter: "{{ consolidated_vars.enable_node_exporter }}"
    enable_postgres_exporter: "{{ consolidated_vars.enable_postgres_exporter }}"
    enable_redis_exporter: "{{ consolidated_vars.enable_redis_exporter }}"
    enable_nginx_exporter: "{{ consolidated_vars.enable_nginx_exporter }}"
    django_metrics_enabled: "{{ consolidated_vars.django_metrics_enabled }}"
  notify: restart grafana-agent

- name: Validate generated YAML configuration syntax
  shell: |
    # Verificar sintaxis YAML b√°sica
    python3 -c "
    import yaml
    try:
        with open('/etc/grafana-agent/grafana-agent.yml', 'r') as f:
            yaml.safe_load(f)
        print('‚úÖ YAML syntax is valid')
    except yaml.YAMLError as e:
        print(f'‚ùå YAML syntax error: {e}')
        exit(1)
    except Exception as e:
        print(f'‚ùå Error reading file: {e}')
        exit(1)
    "
  register: yaml_validation
  changed_when: false

- name: Display YAML validation result
  debug:
    msg: "{{ yaml_validation.stdout }}"

- name: Check for duplicate keys in generated configuration
  shell: |
    # Buscar posibles duplicados en la configuraci√≥n generada
    awk '/^[[:space:]]*[a-zA-Z_]+:/ {
        key = $1; gsub(/:/, "", key)
        if (seen[key]++) {
            print "DUPLICATE KEY FOUND: " key " (line " NR ")"
            exit 1
        }
    }' /etc/grafana-agent/grafana-agent.yml
    echo "‚úÖ No duplicate keys found"
  register: duplicate_check
  changed_when: false
  failed_when: 
    - duplicate_check.rc != 0
    - "'DUPLICATE KEY FOUND' in duplicate_check.stdout"

- name: Display duplicate check result
  debug:
    msg: "{{ duplicate_check.stdout }}"

# ============================================================================
# SERVICIO SYSTEMD
# ============================================================================

- name: Create Grafana Agent systemd service
  template:
    src: grafana-agent.service.j2
    dest: /etc/systemd/system/grafana-agent.service
    owner: root
    group: root
    mode: '0644'
  notify: 
    - reload systemd
    - restart grafana-agent

- name: Add missing handler for systemd reload
  meta: flush_handlers

# ============================================================================
# INICIO Y VERIFICACI√ìN DEL SERVICIO
# ============================================================================

- name: Start and enable Grafana Agent
  systemd:
    name: grafana-agent
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for Grafana Agent to start
  wait_for:
    port: "{{ consolidated_vars.grafana_agent_port }}"
    host: localhost
    delay: 5
    timeout: 30
  ignore_errors: yes

- name: Verify Grafana Agent is running
  command: systemctl is-active grafana-agent
  register: grafana_agent_status
  retries: 3
  delay: 5
  until: grafana_agent_status.stdout == "active"
  changed_when: false

- name: Test Grafana Agent metrics endpoint
  uri:
    url: "http://localhost:{{ consolidated_vars.grafana_agent_port }}/metrics"
    method: GET
    status_code: 200
  register: metrics_test
  retries: 3
  delay: 5
  ignore_errors: yes

- name: Test connectivity to Grafana Cloud
  uri:
    url: "{{ consolidated_vars.vault_grafana_prometheus_url }}"
    method: POST
    headers:
      Authorization: "Basic {{ (consolidated_vars.vault_grafana_username + ':' + consolidated_vars.vault_grafana_password) | b64encode }}"
      Content-Type: "application/x-protobuf"
    body: ""
    status_code: [200, 400, 405]
  register: grafana_cloud_test
  ignore_errors: yes
  no_log: true

- name: Display final Grafana Agent deployment status
  debug:
    msg: |
      üéâ Grafana Agent Desplegado Exitosamente
      ======================================
      Service Status: {{ grafana_agent_status.stdout }}
      Metrics Endpoint: {{ 'OK' if metrics_test.status == 200 else 'Failed' }}
      Grafana Cloud: {{ 'OK' if grafana_cloud_test.status in [200, 400, 405] else 'Failed' }}
      
      üîê Secret Manager Integration:
      - Secret: {{ gcp_project_id }}-{{ app_environment | default(environment) }}-grafana-token
      - Token: {{ consolidated_vars.vault_grafana_password[:10] }}*** (√∫ltimos caracteres ocultos)
      
      üìä Monitoring Endpoints:
      - Grafana Agent: http://localhost:{{ consolidated_vars.grafana_agent_port }}/metrics
      - Node Exporter: http://localhost:{{ consolidated_vars.node_exporter_port }}/metrics
      - Redis Exporter: http://localhost:{{ consolidated_vars.redis_exporter_port }}/metrics
      - Nginx Exporter: http://localhost:{{ consolidated_vars.nginx_exporter_port }}/metrics
      - Django App: http://localhost:8000/metrics/
      
      üîß Management Commands:
      - Status: sudo systemctl status grafana-agent
      - Logs: sudo journalctl -u grafana-agent -f
      - Restart: sudo systemctl restart grafana-agent
      - Test config: /usr/local/bin/grafana-agent --config.validate --config.file=/etc/grafana-agent/grafana-agent.yml

- name: Clean up temporary files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/grafana-agent.zip
    - /tmp/grafana-agent-linux-amd64
  ignore_errors: yes

- name: Clear sensitive variables from memory
  set_fact:
    grafana_api_token_value: ""
    consolidated_vars: {}
  no_log: true