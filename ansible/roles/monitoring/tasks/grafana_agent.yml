---
# ============================================================================
# ARCHIVO: ansible/roles/monitoring/tasks/grafana_agent.yml
# Tasks para Grafana Agent con integración de Google Secret Manager
# ============================================================================

- name: Check if Grafana API Token secret exists and is accessible
  command: >
    gcloud secrets versions access latest 
    --secret="{{ gcp_project_id }}-{{ app_environment }}-grafana-token"
  register: grafana_secret_check
  failed_when: false
  changed_when: false
  no_log: true

- name: Fail if Grafana API Token secret doesn't exist or is not accessible
  fail:
    msg: |
      ❌ Grafana API Token secret no encontrado o no accesible: {{ gcp_project_id }}-{{ app_environment }}-grafana-token
      
      📝 Para crear el secret, ejecuta:
      ./scripts/configure-grafana-token.sh {{ gcp_project_id }} {{ app_environment }}
      
      O manualmente:
      echo -n "tu-grafana-token" | gcloud secrets create {{ gcp_project_id }}-{{ app_environment }}-grafana-token --data-file=-
      
      🔐 Verifica que el Service Account tenga permisos:
      gcloud projects add-iam-policy-binding zentraflow \
        --member="serviceAccount:{{ gcp_project_id }}-{{ app_environment }}@zentraflow.iam.gserviceaccount.com" \
        --role="roles/secretmanager.secretAccessor"
  when: grafana_secret_check.rc != 0

- name: Set Grafana API Token variable
  set_fact:
    grafana_api_token_value: "{{ grafana_secret_check.stdout }}"
  no_log: true

- name: Verify Grafana API Token format
  fail:
    msg: "❌ Error: Grafana API Token no tiene el formato esperado (debe empezar con 'glc_')"
  when: not grafana_api_token_value.startswith('glc_')

- name: Display Grafana Cloud configuration (without token)
  debug:
    msg: |
      📊 Configuración Grafana Cloud
      =============================
      URL: {{ vault_grafana_prometheus_url }}
      Usuario: {{ vault_grafana_username }}
      Token: {{ grafana_api_token_value[:10] }}*** (obtenido de Secret Manager)
      Secret: {{ gcp_project_id }}-{{ app_environment }}-grafana-token

- name: Stop existing Grafana Agent service if exists
  systemd:
    name: grafana-agent
    state: stopped
  ignore_errors: yes

- name: Remove existing Grafana Agent configuration (cleanup)
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/grafana-agent/grafana-agent.yml
    - /tmp/grafana-agent.zip
    - /tmp/grafana-agent-linux-amd64
  ignore_errors: yes

- name: Download Grafana Agent v0.38.1
  get_url:
    url: "https://github.com/grafana/agent/releases/download/{{ grafana_agent_version }}/grafana-agent-linux-amd64.zip"
    dest: "/tmp/grafana-agent.zip"
    timeout: 60
    mode: '0644'
  retries: 3
  delay: 10

- name: Extract Grafana Agent
  unarchive:
    src: "/tmp/grafana-agent.zip"
    dest: "/tmp"
    remote_src: yes
    creates: "/tmp/grafana-agent-linux-amd64"

- name: Install Grafana Agent binary
  copy:
    src: "/tmp/grafana-agent-linux-amd64"
    dest: "/usr/local/bin/grafana-agent"
    mode: '0755'
    owner: root
    group: root
    remote_src: yes
  notify: restart grafana-agent

- name: Verify Grafana Agent binary installation
  command: /usr/local/bin/grafana-agent --version
  register: grafana_agent_version_check
  changed_when: false
  failed_when: grafana_agent_version_check.rc != 0

- name: Display Grafana Agent version
  debug:
    msg: "Grafana Agent installed: {{ grafana_agent_version_check.stdout_lines[0] }}"

- name: Create Grafana Agent configuration with Secret Manager token
  template:
    src: grafana-agent.yml.j2
    dest: /etc/grafana-agent/grafana-agent.yml
    owner: monitoring
    group: monitoring
    mode: '0600'
    backup: yes
  notify: restart grafana-agent

- name: Validate Grafana Agent configuration syntax
  shell: |
    if /usr/local/bin/grafana-agent --help | grep -q "dry-run"; then
      /usr/local/bin/grafana-agent --config.file=/etc/grafana-agent/grafana-agent.yml --dry-run
    else
      echo "Validation skipped: dry-run flag not available in this version"
    fi
  register: config_validation
  changed_when: false
  failed_when: false

- name: Display configuration validation result
  debug:
    msg: "✅ Grafana Agent configuration validation completed"

- name: Create Grafana Agent systemd service
  template:
    src: grafana-agent.service.j2
    dest: /etc/systemd/system/grafana-agent.service
    owner: root
    group: root
    mode: '0644'
  notify: 
    - reload systemd
    - restart grafana-agent

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Start and enable Grafana Agent
  systemd:
    name: grafana-agent
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for Grafana Agent to start
  wait_for:
    port: 12345
    host: localhost
    delay: 5
    timeout: 30
  ignore_errors: yes

- name: Verify Grafana Agent is running
  command: systemctl is-active grafana-agent
  register: grafana_agent_status
  retries: 3
  delay: 5
  until: grafana_agent_status.stdout == "active"
  changed_when: false

- name: Test Grafana Agent metrics endpoint
  uri:
    url: "http://localhost:12345/metrics"
    method: GET
    status_code: 200
  register: metrics_test
  retries: 3
  delay: 5
  ignore_errors: yes

- name: Test connectivity to Grafana Cloud
  uri:
    url: "{{ vault_grafana_prometheus_url }}"
    method: POST
    headers:
      Authorization: "Basic {{ (vault_grafana_username + ':' + grafana_api_token_value) | b64encode }}"
      Content-Type: "application/x-protobuf"
    body: ""
    status_code: [200, 400, 405]
  register: grafana_cloud_test
  ignore_errors: yes
  no_log: true

- name: Display Grafana Agent deployment status
  debug:
    msg: |
      🎉 Grafana Agent con Secret Manager
      =================================
      Service Status: {{ grafana_agent_status.stdout }}
      Metrics Endpoint: {{ 'OK' if metrics_test.status == 200 else 'Failed' }}
      Grafana Cloud: {{ 'OK' if grafana_cloud_test.status in [200, 400, 405] else 'Failed' }}
      
      🔐 Secret Manager Integration:
      - Secret: {{ gcp_project_id }}-{{ app_environment }}-grafana-token
      - Token: {{ grafana_api_token_value[:10] }}*** (últimos caracteres ocultos)
      
      📊 Monitoring Endpoints:
      - Grafana Agent: http://localhost:12345/metrics
      - Node Exporter: http://localhost:{{ node_exporter_port | default(9100) }}/metrics
      - Django App: http://localhost:8000/metrics/
      
      🔧 Management Commands:
      - Status: sudo systemctl status grafana-agent
      - Logs: sudo journalctl -u grafana-agent -f
      - Restart: sudo systemctl restart grafana-agent

- name: Clean up temporary files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/grafana-agent.zip
    - /tmp/grafana-agent-linux-amd64
  ignore_errors: yes

- name: Clear Grafana API Token from memory
  set_fact:
    grafana_api_token_value: ""
  no_log: true